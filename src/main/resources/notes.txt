Kroki do wykonanie przy dodawaniu ResourceBundle.

Case:jest to sposob na płynne przechodzenie pomiędzy językami w jakich stworzone są poszczegolne controlki w aplikacji w zależności
od lokalizacji. Wybór języka bazuje na kodach oznaczających języki oraz kraje np "en" - oznacza język ang a "US" - lokalizacjia USA.
W katalogach zwanych "Resource Bundle" tworzone są pliki z rozszerzeniem .properities w których przechowywane są wartości w postaci key=value.
Całej aplikacji ustawiać scieżkę do katalogu (nazwa np. bundles) i pliku z którego ma korzystać. Moje pliki mogą się nazywać np. messages,
messages_pl, messeges_ge. Wystarczy ze w ścieżce podam "bundles.messages" a apliakcja będzie przełączała sobie pomiędzy odpowiednimi dla lokalizacji
plikami w razie potrzeby.

1. Tworzę katalog typy Resource Bundles
2. Tworzę na raz kilka plików dla poszczególnych języków, ustalam bazowy kawałek nazwy
3. Do pszczególnych plików dodaje wiersze w postaci key=value. Mogę skorzystać z dedykowanego formatera dla plików RB.
4. W metodzie start() aplikacji dodaję obiekt RB ze ścieżką do katalogu oraz ładuję ten obiekt do zasobów z któych korzysta FXMLLoader

            ResourceBundle resourceBundle = ResourceBundle.getBundle("bundles.messages");
            fxmlLoader.setResources(resourceBundle);
5. W SB lub odpowiednim pliku FXML muszę wskazać plik z resourceami z którego plik ma korzystać a następnie dla każdej kontrolki
która ma dostosowywać język muszę w atrybucie Text ustawić korzystanie z internactionalization oraz wpisać odpowiedni KEY jako text

6. Tutuł aplikacji mogę bezpośrednio ustawić jako korzystający z key=values poprzez: resourceBundles.getString("com.example.mylibrary.app.title") <- podając key
7. Sprawdzenie zmiany wykonuję poprzez zmianę lokalizacji dla aplikacji poprzez: Local.setDefault(new Local("en"));